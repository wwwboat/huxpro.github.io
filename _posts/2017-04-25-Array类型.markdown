---
layout:     post
title:      "jsArray用型"
subtitle:   " \"高程3之js引用类型\""
date:       2017-04-25 10:30:00
author:     "wwwboat"
header-img: ""
catalog: true
tags:
    - 高程
---

# 引用类型

引用类型是一种数据结构，用于将数据和功能组织在一起。<br/>
对象是某个特定引用类型的实例。新对象是使用new操作符后跟一个构造函数来创建的。构造函数本身就是一个函数，只不过该函数是出于创建新对象的目的而定义的。它只为新对象定义了默认的属性和方法。

## Array类型

#### length属性
数组的length属性不是只读的，可以利用length属性方便地在数组末尾移除项或添加新项。
```
var color=["red","yellow","green"];
color.length=2;
alert(color[2]);   //undefined
```
```
var color=["red","yellow","green"];
color[color.length]="black";  //在数组位置3添加一个black
color[color.length]="brown";  //在数组位置4添加一个brown
```

#### 检测数组
instanceof操作符可以用于检测Array，但是这个操作符假定只有一个全局执行环境。如果网页包含多个框架，那实际上就存在两个以上不同的全局环境，从而存在两个以上
不同版本的Array构造函数。<br/>
为了解决这个问题，新增了Array.isArray（）方法，这个方法的目的是最终确定某个值到底是不是数组，而不管它是在哪个全局环境中创建的。

#### 转换方法
调用toString（）方法会返回由数组中每个值的字符串形式拼接而成的，一个以逗号分隔的字符串。<br/>
join（）方法可以使用不同的分隔符来构建这个字符串。传参为作为分隔符的内容。如果不传参或者传入undefined，则会默认使用逗号分隔。

#### 栈方法
栈是一种LIFO（Last-In-First-Out，后进先出）的结构。栈中项的插入和移出只发生在一个位置--栈的顶部。

两种栈方法：
- push（）
  push（）方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度（array.length)。
- pop()
  pop（）方法则从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。
  
#### 队列方法
队列数据结构的访问规则是FIFO（First-In—First-Out，先进先出）。队列在列表的末端添加项，从列表的前端移除项。
两种队列方法：
- shift（）
  移除数组中的第一个项，并返回该项，length减1.
- unshift（）
  在数组前端添加任意个项并返回新数组的长度。
  
#### 重排序方法
- reverse（）
  reverse（）方法会反转数组项的顺序。
- sort（）
  sort（）方法按照升序排列数组项，为了实现排序，sort（）方法会调用每个数组项的toString（）转型方法，然后比较得到的字符串。
sort（）方法可以接收一个比较函数作为参数。比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个参数后面则返回一个正数：
```
function compare(val1,val2){
if(val1 < val2){
return -1;}else if{val1>val2){
return 1;}else{return 0;}
}

var value=[0,1,5,10,15];
value.sort(compare);
alert(value);  //0,1,5,10,15
```
#### 操作方法
- concat（）
  concat（）方法可以基于当前数组中的所有项创建一个新数组。这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。
- slice（）
  slice（）方法能够基于当前数组中的一个或多个项创建一个新数组，它可接收一或两个参数，即要返回项的起始位置和结束位置，取前不取后。slice（）方法不会影响原始数组。<br/>
  如果slice（）方法的参数有复数，则用数组的长度与其相加。例如：在一个包含5项的数组中，slice（-2，-1）与slice（3，4）得到的结果相同。如果结束位置小于起始位置，则返回空数组。
  
- splice（）
  splice（）的主要用途是向数组的中部插入项。
  <br/>
  删除：两个参数，1，删除项的位置，2，删除项的数目。
  <br/>
  插入：3个参数：起始位置，0，插入的项
  <br/>
  替换：3个参数：起始位置，要删除的项数，插入的项。
  <br/>
  splice()方法始终都会返回一个数组，该数组包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。
  
#### 位置方法
两个位置方法：
- indexOf（）  从开头向后查找
- lastIndexOf（） 从后向前查找
<br/>
这两个方法都接收两个参数：要查找的项和表示查找起点位置的索引（可选）。
<br/>
这两个方法都返回要查找的项在数组中的位置，在没找到的情况下返回-1.在比较第一个参数与数组中的每一项时，要使用===全等操作符。
  位置
  
#### 迭代方法
数组拥有5个迭代方法，每个方法都接收两个参数：在每一项上运行的函数，运行该函数的作用域对象--影响this的值（可选）。<br/>
传入这些方法中的函数，有三个参数：数组项的值，该项在数组中的位置，数组本人。

- every（）：
  对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。
- filter（）：
  对数组中的每一项运行给定函数，返回该函数会返回true的项组成的函数。
- forEach（）：
  对数组中的每一项运行给定函数，没有返回值。与for循环差不多。
- map（）：
  对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。
- some（）：
  对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。
  
  ```
  var num=[1,2,4,5,3,4,3,2,1];
  var result=num.every(function(item,index,array){
    return (item>2);
    }
    alert(result);  //false
    
  var result=num.some(function(item,index,array){
    return (item>2);
    }
    alert(result);  //true
  ```
  
  ```
  var num=[1,2,4,5,3,4,3,2,1];
  var result=num.filter(function(item,index,array){
    return (item>2);
    }
    alert(result);  //[3,4,5,4,3]
    ```
    ```
    var num=[1,2,4,5,3,4,3,2,1];
  var result=num.map(function(item,index,array){
    return item*2;
    }
    alert(result);  //[2,4,8,10,6,8,6,4,2]
    ```
    ```
    var num=[1,2,4,5,3,4,3,2,1];
  var result=num.forEach(function(item,index,array){
    执行某些操作
    }
    alert(result);  //false
