---
layout:     post
title:      js-Function类型
subtitle:   " \"高程3之js引用类型\""
date:       2017-04-27 09:45:00
author:     "wwwboat"
header-img: ""
catalog: true
tags:
    - 高程
---

# Function类型
```
function sun(num1,num2){
return num1+num2;
}
alert(sum(10,10);  //20
var anotherSum=sum;   //sum不带圆括号，所以是访问函数指针，而非调用函数。
alert(anotherSum(10,10);  //20
sum=null;
alert(anotherSum(10,10);  //20

```
要访问函数的指针而不执行函数的话，必须去掉函数名后面的圆括号。<br/>
上面anotherSum和sum都指向了同一个函数，如果讲sum设置为null，让它与函数断绝关系，也仍然可以正常调用anotherSum。null是空对象指针，sum是指针改变方向了，而非将原本的函数改为null。

### 没有重载
声明两个同名函数，后面的函数会覆盖前面的函数。

### 函数声明与函数表达式
解析器对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码前可以访问，对于函数表达式，必须等到解析器执行到它所在的代码行，才能被解释执行。<br/>

### 函数内部属性
在函数内部，有两个特殊的对象：arguments和this。
 - arguments：
   arguments有一个名叫callee的属性，callee是一个指针，指向拥有这个arguments对象的函数。
   ```
   function factorial(num){
   if(num<=1){
   return 1;
   }else{
   return num*factorial(num-1);
   }
   }
   ```
   以上为递归算法，里面那个函数的执行与函数名factorial紧紧耦合在了一起，为了消除这个耦合的现象，可以使用arguments.callee.
   ```
   function factorial(num){
   if(num<=1){
   return 1;
   }else{
   return num*arguments.callee(num-1);
   }
   }
   ```
  此时，无论引用函数时使用的是什么名字，都可以保证正常完成递归调用。
  ```
  var trueFactotial=factorial;
  factorial=function(){
  return 0;
  }
  alert(trueFactotial(5));  //120
  alert(factorial(5));      //0
  ```
  在严格模式下，访问arguments.callee会导致错误。
  
  - this：
  this引用的是函数执行的环境对象。
  
  
  ### 函数的属性和方法
  #### 属性：length、prototype
  length：表示函数希望接收的命名参数的个数。<br/>
  prototype：对于引用类型而言，prototype是保存它们所有实例方法的真正所在。在ES5中，prototype属性是不可枚举的，因此使用for-in无法发现。<br/>
  
  #### 每个函数都包含两个非继承而来的方法：apply（）和call。
  这两个方法都用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。<br/>
  apply（）方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组，其中第二个参数可以是Array实例也可以是arguments对象。<br/>
  call()方法和apply（）方法的作用相同，它们的区别仅在于接收参数的方式不同，在使用call（）方法时，传递给函数的参数必须逐个列举出来。<br/>
  在不给函数传递参数的情况下，使用哪个方法都行。<br/>
  
  - apply()和call()真正强大的地方：能够扩充函数赖以运行的作用域
  ```
  window.color="red";
  var o={color:"blue"};
  function sayColor(){
  alert(this.color);
  }
  sayColor();  //red;
  
  sayColor.call(this);  //red;
  sayColor.call(window);//red;
  sayColor.call(o);//blue;
  等价于
  o.sayColor=sayColor;
  o.sayColor();  //blue;
  
  ```
  ES5还定义了一个方法：bind（）<br/>这个方法会创建一个函数的实例，其this值会被绑定到传给bind（）函数的值：
  ```
  window.color="red";
  var o={color:"blue"};
  function sayColor(){
  alert(this.color);
  }
  var objSayColor=sayColor.bind(o);
  objSayColor(); //blue
  ```
  
  每个函数继承的toLocalString（）和toString（）和valueOf（）方法只返回函数代码，所以没啥用。
